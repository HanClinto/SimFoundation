using Godot;
using System;
using System.Collections.Generic;

namespace SimFoundation 
{

public partial class PathfindingCharacterBody2D : CharacterBody2D
{
	public const float Speed = 40.0f;

	public const int DOWN = 0;
	public const int UP = 1;
	public const int RIGHT = 2;
	public const int LEFT = 3;

	private Vector2 lastVelocity = Vector2.Zero;
	private int lastDirection = DOWN;

	private const int NEXT_POSITION_INDEX = 0;
	private const float ARRIVE_DISTANCE = 1.0f;

	private List<Vector2I> path = new List<Vector2I>();

	// "static" means that exactly one of these variables exists and is shared between all workers.
	// So this means we can only have one selected worker in the game at a time.
	static public PathfindingCharacterBody2D SelectedCharacter = null;

	public override bool IsSelected
	{
		get {
			// Return "true" if this worker is currently selected.
			return (PathfindingCharacterBody2D.SelectedCharacter == this);
		}
		set {
			if (value) {
				// If setting "IsSelected" to true, then will set the global selection to this sprite.
				PathfindingCharacterBody2D.SelectedCharacter = this;
			} else {
				// If setting "IsSelected" to false, and we are currently selected, then nothing will be selected.
				if (this.IsSelected) {
					PathfindingCharacterBody2D.SelectedCharacter = null;
				}
			}
		}
	}


	public void SetPath(List<Vector2I> newPath)
	{
		this.path = newPath;
	}

	public override void _PhysicsProcess(double delta)
	{
		Vector2 velocity = Velocity;

		// Get the input direction and handle the movement/deceleration.
		// As good practice, you should replace UI actions with custom gameplay actions.
		Vector2 direction = Vector2.Zero;

		// If we have a path that we're currently following
		if (this.path.Count > 0)
		{
			// Get the next position in the path
			Vector2 targetPointWorld = path[NEXT_POSITION_INDEX];

			// If we're close enough to the next position, then remove it from the path
			if (ArrivedTo(targetPointWorld))
			{
				this.path.RemoveAt(NEXT_POSITION_INDEX);

				// Get the next position in the path
				if (this.path.Count > 0)
				{
					targetPointWorld = path[NEXT_POSITION_INDEX];
				}
			}

			if (this.path.Count == 0)
			{
				direction = Vector2.Zero;
			} else {
				// Get the direction to the next position
				direction = (targetPointWorld - Position).Normalized();
			}
		} else {
            /*
			// If we're currently selected, then let us be driven around with the arrow keys.
			if (this.IsSelected) {
				direction = Input.GetVector("ui_left", "ui_right", "ui_up", "ui_down");				
			}
            */
		}
		
		velocity = direction * Speed;

		Velocity = velocity;
		MoveAndSlide();

		this.lastVelocity = Velocity;
	}

	private bool ArrivedTo(Vector2 destination)
	{
		return this.Position.DistanceTo(destination) < ARRIVE_DISTANCE;
	}

}
}